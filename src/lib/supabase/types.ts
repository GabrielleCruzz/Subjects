// This file is automatically generated. AVOID UPDATING IT DIRECTLY.
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instantiate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: '13.0.5'
  }
  public: {
    Tables: {
      community_posts: {
        Row: {
          comments: Json
          content: string
          id: string
          likes: Json
          timestamp: string | null
          title: string
          user_id: string | null
        }
        Insert: {
          comments?: Json
          content: string
          id?: string
          likes?: Json
          timestamp?: string | null
          title: string
          user_id?: string | null
        }
        Update: {
          comments?: Json
          content?: string
          id?: string
          likes?: Json
          timestamp?: string | null
          title?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: 'community_posts_user_id_fkey'
            columns: ['user_id']
            isOneToOne: false
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
        ]
      }
      quizzes: {
        Row: {
          created_at: string | null
          difficulty: Database['public']['Enums']['quiz_difficulty']
          id: string
          questions: Json
          subject: string
          title: string
        }
        Insert: {
          created_at?: string | null
          difficulty: Database['public']['Enums']['quiz_difficulty']
          id?: string
          questions?: Json
          subject: string
          title: string
        }
        Update: {
          created_at?: string | null
          difficulty?: Database['public']['Enums']['quiz_difficulty']
          id?: string
          questions?: Json
          subject?: string
          title?: string
        }
        Relationships: []
      }
      tasks: {
        Row: {
          created_at: string | null
          due_date: string | null
          id: string
          status: Database['public']['Enums']['task_status']
          title: string
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          due_date?: string | null
          id?: string
          status?: Database['public']['Enums']['task_status']
          title: string
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          due_date?: string | null
          id?: string
          status?: Database['public']['Enums']['task_status']
          title?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: 'tasks_user_id_fkey'
            columns: ['user_id']
            isOneToOne: false
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
        ]
      }
      users: {
        Row: {
          avatar_url: string | null
          email: string
          id: string
          institution: string | null
          name: string
          registered_at: string | null
          role: Database['public']['Enums']['user_role']
          score: number
          series: string | null
        }
        Insert: {
          avatar_url?: string | null
          email: string
          id?: string
          institution?: string | null
          name: string
          registered_at?: string | null
          role?: Database['public']['Enums']['user_role']
          score?: number
          series?: string | null
        }
        Update: {
          avatar_url?: string | null
          email?: string
          id?: string
          institution?: string | null
          name?: string
          registered_at?: string | null
          role?: Database['public']['Enums']['user_role']
          score?: number
          series?: string | null
        }
        Relationships: []
      }
      video_comments: {
        Row: {
          id: string
          status: Database['public']['Enums']['comment_moderation_status']
          text: string
          timestamp: string | null
          user_id: string | null
          video_id: string | null
        }
        Insert: {
          id?: string
          status?: Database['public']['Enums']['comment_moderation_status']
          text: string
          timestamp?: string | null
          user_id?: string | null
          video_id?: string | null
        }
        Update: {
          id?: string
          status?: Database['public']['Enums']['comment_moderation_status']
          text?: string
          timestamp?: string | null
          user_id?: string | null
          video_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: 'video_comments_user_id_fkey'
            columns: ['user_id']
            isOneToOne: false
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
          {
            foreignKeyName: 'video_comments_video_id_fkey'
            columns: ['video_id']
            isOneToOne: false
            referencedRelation: 'videos'
            referencedColumns: ['id']
          },
        ]
      }
      videos: {
        Row: {
          created_at: string | null
          description: string
          id: string
          likes: number
          subject: string
          thumbnail_url: string
          title: string
          uploader_id: string | null
          video_url: string
          views: number
        }
        Insert: {
          created_at?: string | null
          description: string
          id?: string
          likes?: number
          subject: string
          thumbnail_url: string
          title: string
          uploader_id?: string | null
          video_url: string
          views?: number
        }
        Update: {
          created_at?: string | null
          description?: string
          id?: string
          likes?: number
          subject?: string
          thumbnail_url?: string
          title?: string
          uploader_id?: string | null
          video_url?: string
          views?: number
        }
        Relationships: [
          {
            foreignKeyName: 'videos_uploader_id_fkey'
            columns: ['uploader_id']
            isOneToOne: false
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      comment_moderation_status: 'Pendente' | 'Aprovado' | 'Rejeitado'
      quiz_difficulty: 'Fácil' | 'Médio' | 'Difícil' | 'Impossível'
      task_status: 'pending' | 'completed'
      user_role: 'student' | 'teacher' | 'admin'
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, '__InternalSupabase'>

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, 'public'>]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] &
        DefaultSchema['Views'])
    ? (DefaultSchema['Tables'] &
        DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema['Enums']
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']
    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema['CompositeTypes']
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']
    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      comment_moderation_status: ['Pendente', 'Aprovado', 'Rejeitado'],
      quiz_difficulty: ['Fácil', 'Médio', 'Difícil', 'Impossível'],
      task_status: ['pending', 'completed'],
      user_role: ['student', 'teacher', 'admin'],
    },
  },
} as const
